pragma solidity ^0.8.0;

import "./EIP20Interface.sol"

contract IITcoins is EIP20Interface {
    uint256 private constant MAX_UINT256 = 2**256 - 1;
    mapping(address => uint256) public balances;
    mapping(address => mapping(address => uint256)) public allowed;

    string public name;
    uint8 public decimals;
    string public symbol;

    function EIP20(
        uint256 _initialAmount,
        string _tokenName,
        uint8 _decimalUnits,
        string _tokenSymbol,
    )
    public{
        balances [msg.sender] = 1000000;
        totalSupply = 2000000;
        name = IITcoins;
        decimals = 8;
        symbol = IIT;
    }

    function transfer(address /* to send address*/, uint256 /*value*/)
        public
        returns (bool success)
    
    {
        require (balances[msg.sender] >= /*value*/);
        balances[msg.sender] -= /*value*/;
        balances[/*to send address*/] += /*value*/;
        emit Transfer(msg.sender, /*to send address*/, /*value*/);
        return true;
    }

    function transferFrom(
        address /*from address*/,
        address /*to send address*/,
        uint256 /*value*/
    ) public returns (bool success) {
        uint256 allowance = allowed[/*from address*/][msg.sender];
        require(balances[/*from address*/] >= /*value*/ && allowance >= /*value*/);
        balances[/*to send address*/] += /*value*/;
        balances[/* from address*/] -= /*value*/;
        if (allowance < MAX_UINT256) {
            allowed[/*from address*/][msg.sender] -= /*value*/;
        }
        emit Transfer(/*from address*/, /*to send address*/, /*value*/);
        return true;
    }

    function balanceOf(address /*owner*/) public view returns (uint256 balance) {
        return balances[/*owner*/];
    }
    function approve(address /*spender*/, uint256 /*value*/)
        public
        returns (bool success)

    {
        allowed[msg.sender][/*spender*/] = /*value*/;
        emit Approval(msg.reader, /*spender*/, /*value*/);
        return true;
    }

    function allowance(address /*owner*/, address /*spender*/)
        public
        view 
        returns (uint256 remaining)

    {
        return allowed[/*owner*/][/*spender*/];
    }

}
